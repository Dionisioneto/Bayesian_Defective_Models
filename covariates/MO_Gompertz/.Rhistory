dem = (1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta)))^2
return(num/dem)
}
Stmo_IG = function(t,alpha,beta,lambda){
num = lambda*St_IG(t=t,alpha=alpha,beta=beta)
dem = 1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta))
return(num/dem)
}
Ftmo_IG = function(t,alpha,beta,lambda){
num = lambda*St_IG(t=t,alpha=alpha,beta=beta)
dem = 1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta))
return(1-(num/dem))
}
# ---
# 2: Algoritmo gerador de dados
# ---
gen.cure.reg.moig = function(n,as,bs,xa,xb,l){
finv.moig = function(t,alpha,beta,lambda,unif){Ftmo_IG(t=t,alpha=alpha,beta=beta,lambda=lambda) - unif}
ger.moig = function(alpha,beta,lambda,unif){t=uniroot(finv.moig,c(0,1000),tol=0.01,alpha=alpha,beta=beta,lambda=lambda,unif=unif);return(t$root)}
## individual parameters
a = cbind(1,xa) %*% as
b = exp(cbind(1,xb) %*% bs)
p_base = 1-exp(2*a/b)
p_cure = (l*p_base)/(l*p_base+1-p_base)
t = rep(NA,n)
for(i in 1:n){
rmi = rbinom(n=1,size=1,prob=1-p_cure[i,])
uni = runif(n=1,0,max=1-p_cure[i,])
t[i] = ifelse(rmi==0, Inf, ger.moig(alpha=a[i,],beta=b[i,],lambda=l,unif=uni))
}
t_finite = ifelse(t==Inf,0,t)
u2 = runif(n=n,0,max(t_finite))
t2 = pmin(t,u2); delta = ifelse(t<u2,1,0)
return(cbind(t2,delta,xa,xb))
}
## Step 2: Generate data
n=5000
## Parameters information
a0 = c(-1, 0.5, 0.2)
b0 = c(-1.1, 1.8, 0.8)
l0 = 0.5
## covariates data
xa1 = rbinom(n=n,size=1,prob=0.7); xa2 = runif(n=n,0,1)
xb1 = rbinom(n=n,size=1,prob=0.5); xb2 = runif(n=n,0,1)
xa0 = cbind(xa1, xa2)
xa0 = cbind(xb1, xb2)
## generate data given coeficients, covariates data and lambda given.
data.moig = gen.cure.reg.moig(n=n,as=a0,bs=b0,xa=xa0,xb=xa0,l=l0) ## well done!
data.moig = as.data.frame(data.moig)
mean(data.moig$delta)
a = cbind(1,xa0) %*% a0
b = exp(cbind(1,xa0) %*% b0)
p = (l0*(1-exp(2*a/b)))/(l0*(1-exp(2*a/b))+1-(1-exp(2*a/b)))
summary(a)
summary(b)
summary(p)
cod_regmoig = "
data {
int<lower=0> N; // Número de oaservações
int<lower=0> p; // Número de covariáveis para alpha
int<lower=0> s; // Número de covariáveis para beta
vector[N] time;  // Tempo de falha
vector[N] delta; // Indicador de censura
matrix[N, p] xa; // Matriz de covariáveis para alpha (N x p)
matrix[N, s] xb; // Matriz de covariáveis para beta (N x s)
}
parameters {
vector[p] as; // Coeficientes para alpha
vector[s] bs; // Coeficientes para beta
real<lower=0> lambda;
}
transformed parameters {
vector[N] alpha = xa * as; // Cálculo de alpha
vector[N] beta = exp(xb * bs); // Cálculo de beta
}
model {
// Priori para os coeficientes em alpha
for (j in 1:p) {
as[j] ~ normal(0, 10);
}
// Priori para os coeficientes em beta
for (j in 1:s) {
bs[j] ~ normal(0, 10);
}
// Priori para lambda
lambda ~ gamma(0.01, 0.01);
for (i in 1:N) {
// funções
real z1 = (-1 + alpha[i] * time[i]) / sqrt(beta[i] * time[i]);
real z2 = (-1 - alpha[i] * time[i]) / sqrt(beta[i] * time[i]);
real phi1 = Phi(z1);
real phi2 = Phi(z2);
// log-verossimilhança
target += delta[i] * log(lambda*exp((-1/(2*beta[i]*time[i]))*(1-alpha[i]*time[i])^2)) -
delta[i] * log(sqrt(2*pi()*beta[i]*time[i]^3) * (lambda + (1-lambda)*(phi1 + exp(2*alpha[i]/beta[i])*phi2))^2) +
(1-delta[i])*log(lambda-lambda*(phi1 + exp(2*alpha[i]/beta[i])*phi2)) -
(1-delta[i])*log(lambda+(1-lambda)*(phi1 + exp(2*alpha[i]/beta[i])*phi2));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_regmoig, con = "cod_regmoig.stan")
data_regmoig = list(N = dim(data.moig)[1],
p = dim(cbind(1,data.moig[,3:4]))[2],
s = dim(cbind(1,data.moig[,5:6]))[2],
time = data.moig[,1],
delta = data.moig[,2],
xa = cbind(1,data.moig[,3:4]),
xb = cbind(1,data.moig[,5:6]))
regmoigfit = stan(file = 'cod_regmoig.stan', data =data_regmoig,
chains = 1, iter=2000, warmup=300)
regmoigfit_post_samples = extract(regmoigfit)
par(mfrow=c(3,3))
# as
plot(regmoigfit_post_samples$as[,1], type='l')
abline(h=a0[1], col='red', lwd=2)
plot(regmoigfit_post_samples$as[,2], type='l')
abline(h=a0[2], col='red', lwd=2)
plot(regmoigfit_post_samples$as[,3], type='l')
abline(h=a0[3], col='red', lwd=2)
#bs
plot(regmoigfit_post_samples$bs[,1], type='l')
abline(h=b0[1], col='red', lwd=2)
plot(regmoigfit_post_samples$bs[,2], type='l')
abline(h=b0[2], col='red', lwd=2)
plot(regmoigfit_post_samples$bs[,3], type='l')
abline(h=b0[3], col='red', lwd=2)
#lambda
plot(regmoigfit_post_samples$lambda, type='l')
abline(h=l0, col='red', lwd=2)
params=c(a0,a0,l0)
## posterior mean
ma0=mean(regmoigfit_post_samples$as[,1])
ma1=mean(regmoigfit_post_samples$as[,2])
ma2=mean(regmoigfit_post_samples$as[,3])
ma0=mean(regmoigfit_post_samples$as[,1])
mb1=mean(regmoigfit_post_samples$as[,2])
mb2=mean(regmoigfit_post_samples$as[,3])
mlamb=mean(regmoigfit_post_samples$lambda)
post_mean=c(ma0,ma1,ma2,ma0,mb1,mb2,mlamb)
params
post_mean
sda0=sd(regmoigfit_post_samples$as[,1])
sda1=sd(regmoigfit_post_samples$as[,2])
sda2=sd(regmoigfit_post_samples$as[,3])
sda0=sd(regmoigfit_post_samples$as[,1])
sdb1=sd(regmoigfit_post_samples$as[,2])
sdb2=sd(regmoigfit_post_samples$as[,3])
sdlamb=sd(regmoigfit_post_samples$lambda)
post_sd=c(sda0,sda1,sda2,sda0,sdb1,sdb2,sdlamb)
## credible interval
q025a0 = quantile(regmoigfit_post_samples$as[,1],proas=0.025);q975a0 = quantile(regmoigfit_post_samples$as[,1],proas=0.975)
q025a1 = quantile(regmoigfit_post_samples$as[,2],proas=0.025);q975a1 = quantile(regmoigfit_post_samples$as[,2],proas=0.975)
q025a2 = quantile(regmoigfit_post_samples$as[,3],proas=0.025);q975a2 = quantile(regmoigfit_post_samples$as[,3],proas=0.975)
q025a0 = quantile(regmoigfit_post_samples$as[,1],proas=0.025);q975a0 = quantile(regmoigfit_post_samples$as[,1],proas=0.975)
q025b1 = quantile(regmoigfit_post_samples$as[,2],proas=0.025);q975b1 = quantile(regmoigfit_post_samples$as[,2],proas=0.975)
q025b2 = quantile(regmoigfit_post_samples$as[,3],proas=0.025);q975b2 = quantile(regmoigfit_post_samples$as[,3],proas=0.975)
q025lamb = quantile(regmoigfit_post_samples$lambda,proas=0.025);q975lamb = quantile(regmoigfit_post_samples$lambda,proas=0.975)
qinf025 = c(q025a0,q025a1,q025a2,q025a0,q025b1,q025b2,q025lamb)
qsup975 = c(q975a0,q975a1,q975a2,q975a0,q975b1,q975b2,q975lamb)
## relative bias
rbias = (post_mean-params)/params*100
rbias
post_mean
params
cpost95 = as.integer((params >= qinf025) & (params <= qsup975))
cpost95
params
qinf025
q025a0
q025a0
regmoigfit_post_samples$as
regmoigfit_post_samples$as[,1]
quantile(regmoigfit_post_samples$as[,1],proas=0.025)
quantile(regmoigfit_post_samples$as[,1],probs=0.025)
## credible interval
q025a0 = quantile(regmoigfit_post_samples$as[,1],probs=0.025);q975a0 = quantile(regmoigfit_post_samples$as[,1],probs=0.975)
q025a1 = quantile(regmoigfit_post_samples$as[,2],probs=0.025);q975a1 = quantile(regmoigfit_post_samples$as[,2],probs=0.975)
q025a2 = quantile(regmoigfit_post_samples$as[,3],probs=0.025);q975a2 = quantile(regmoigfit_post_samples$as[,3],probs=0.975)
q025a0 = quantile(regmoigfit_post_samples$as[,1],probs=0.025);q975a0 = quantile(regmoigfit_post_samples$as[,1],probs=0.975)
q025b1 = quantile(regmoigfit_post_samples$as[,2],probs=0.025);q975b1 = quantile(regmoigfit_post_samples$as[,2],probs=0.975)
q025b2 = quantile(regmoigfit_post_samples$as[,3],probs=0.025);q975b2 = quantile(regmoigfit_post_samples$as[,3],probs=0.975)
q025lamb = quantile(regmoigfit_post_samples$lambda,probs=0.025);q975lamb = quantile(regmoigfit_post_samples$lambda,probs=0.975)
qinf025 = c(q025a0,q025a1,q025a2,q025a0,q025b1,q025b2,q025lamb)
qsup975 = c(q975a0,q975a1,q975a2,q975a0,q975b1,q975b2,q975lamb)
qinf025
qsup975
## relative bias
rbias = (post_mean-params)/params*100
rbias
cpost95 = as.integer((params >= qinf025) & (params <= qsup975))
cpost95
a0 = c(-1, 0.5, 0.2)
b0 = c(-1.1, 1.8, 0.8)
l0 = 0.5
params = c(a0,b0,l0)
start = params-0.25
start
params = c(a0,b0,l0)
start = params-0.15
= params-0.15
params = c(a0,b0,l0)
start = params-0.15
start
dev.off()
# 1. Base functions
ft_IG = function(t,alpha,beta){
den = (1/sqrt(2*pi*beta*t^3))*exp((-(1/(2*beta*t)))*(1-alpha*t)^2)
return(den)
}
Ft_IG = function(t,alpha,beta){
arg1 = (alpha*t-1)/sqrt(beta*t)
arg2 = (-alpha*t-1)/sqrt(beta*t)
Ft = pnorm(q=arg1,mean=0,sd=1) + (exp(2*alpha/beta)*pnorm(q=arg2,mean=0,sd=1))
return(Ft)
}
St_IG = function(t,alpha,beta){
arg1 = (alpha*t-1)/sqrt(beta*t)
arg2 = (-alpha*t-1)/sqrt(beta*t)
Ft = pnorm(q=arg1,mean=0,sd=1) + (exp(2*alpha/beta)*pnorm(q=arg2,mean=0,sd=1))
return(1-Ft)
}
# t: Failure time.
# alpha, beta: Shape parameters.
# lambda: MO parameter.
ftmo_IG = function(t,alpha,beta,lambda){
num = lambda*ft_IG(t=t,alpha=alpha,beta=beta)
dem = (1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta)))^2
return(num/dem)
}
Stmo_IG = function(t,alpha,beta,lambda){
num = lambda*St_IG(t=t,alpha=alpha,beta=beta)
dem = 1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta))
return(num/dem)
}
Ftmo_IG = function(t,alpha,beta,lambda){
num = lambda*St_IG(t=t,alpha=alpha,beta=beta)
dem = 1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta))
return(1-(num/dem))
}
# ---
# 2: Algoritmo gerador de dados ====
# ---
gen.cure.reg.moig = function(n,as,bs,xa,xb,l){
finv.moig = function(t,alpha,beta,lambda,unif){Ftmo_IG(t=t,alpha=alpha,beta=beta,lambda=lambda) - unif}
ger.moig = function(alpha,beta,lambda,unif){t=uniroot(finv.moig,c(0,1000),tol=0.01,alpha=alpha,beta=beta,lambda=lambda,unif=unif);return(t$root)}
## individual parameters
a = cbind(1,xa) %*% as
b = exp(cbind(1,xb) %*% bs)
p_base = 1-exp(2*a/b)
p_cure = (l*p_base)/(l*p_base+1-p_base)
t = rep(NA,n)
for(i in 1:n){
rmi = rbinom(n=1,size=1,prob=1-p_cure[i,])
uni = runif(n=1,0,max=1-p_cure[i,])
t[i] = ifelse(rmi==0, Inf, ger.moig(alpha=a[i,],beta=b[i,],lambda=l,unif=uni))
}
t_finite = ifelse(t==Inf,0,t)
u2 = runif(n=n,0,max(t_finite))
t2 = pmin(t,u2); delta = ifelse(t<u2,1,0)
return(cbind(t2,delta,xa,xb))
}
## Parameters information
n=5000
a0 = c(-1, 0.5, 0.2)
b0 = c(-1.1, 1.8, 0.8)
l0 = 0.5
## Step 1: Build the log-likelihood function
loglik_regmoig = function(par,time,delta,xa,xb){
#parameters
as = par[1:(dim(xa)[2]+1)] # b0, b1, b2
bs = par[(dim(xa)[2]+2):(dim(xa)[2]+1+dim(xb)[2]+1)] # d0, d1, d2
l = par[(dim(xa)[2]+1+dim(xb)[2]+1)+1] # l0
a = cbind(1,xa) %*% as
b = exp(cbind(1,xb) %*% bs)
den = as.vector(ftmo_IG(t=time,alpha=a,beta=b,lambda=l))
surv = as.vector(Stmo_IG(t=time,alpha=a,beta=b,lambda=l))
log_lik = sum(delta*log(den) + (1-delta)*log(surv))
return(-1*log_lik)
}
## 4. Tables to save data ====
n_replicas = 10                         ## number of Monte Carlo replicates
ncols_mc = 4                             ## numero of information in each replicate (mean,sd,bias,cp)
n_amostral = c(50, 100, 500, 1000, 5000) ## sample sizes to study
## Tables
## as = (a0, a1, a2)
moig_mc_a0a1a2 = array(data=0, dim = c(n_replicas, ncols_mc*3, length(n_amostral)),
dimnames = list(1:n_replicas,rep(c("mean", "se", "bias", "cp"),3),n_amostral))
## bs = (b0, b1, b2)
moig_mc_b0b1b2 = array(data=0, dim = c(n_replicas, ncols_mc*3, length(n_amostral)),
dimnames = list(1:n_replicas,rep(c("mean", "se", "bias", "cp"),3),n_amostral))
## lambda
moig_mc_lambda = array(data=0, dim = c(n_replicas, ncols_mc, length(n_amostral)),
dimnames = list(1:n_replicas,c("mean", "se", "bias", "cp"),n_amostral))
## Censura
moig_mc_cens = array(data=0, dim = c(n_replicas, 1, length(n_amostral)))
a0 = c(-1, 0.5, 0.2)
b0 = c(-1.1, 1.8, 0.8)
l0 = 0.5
params = c(a0,b0,l0)
start = params-0.15
for(j in 1:length(n_amostral)){
for(i in 1:n_replicas){
print(paste("Realização Monte Carlo: ", i, ", tamanho amostral:", n_amostral[j]))
## covariates data
xa1 = rbinom(n=n_amostral[j],size=1,prob=0.7); xa2 = runif(n=n_amostral[j],0,1)
xb1 = rbinom(n=n_amostral[j],size=1,prob=0.5); xb2 = runif(n=n_amostral[j],0,1)
xa0 = cbind(xa1, xa2)
xb0 = cbind(xb1, xb2)
dados.reg.moig = gen.cure.reg.moig(n=n_amostral[j],as=a0,bs=b0,xa=xa0,xb=xb0,l=l0)
dados.reg.moig = as.data.frame(dados.reg.moig)
# MLE estimator via optim
maxlike_regmoig = optim(par = start,
fn = loglik_regmoig,
gr = NULL,
hessian = T,
method = "BFGS",
time = dados.reg.moig$t2,
delta = dados.reg.moig$delta,
xa=cbind(dados.reg.moig$xa1,dados.reg.moig$xa2),
xb=cbind(dados.reg.moig$xb1,dados.reg.moig$xb2))
## point estimation (MLE estimate)
mles = maxlike_regmoig$par
## relative bias
rbias = (mles-params)/params
## standard error
se = sqrt(diag(solve(maxlike_regmoig$hessian)))
coverage = se*1.96
inf95 = maxlike_regmoig$par - coverage
sup95 = maxlike_regmoig$par + coverage
cp95 = as.integer((params >= inf95) & (params <= sup95))
## salvando valores
moig_mc_a0a1a2[i,1,j] = mles[1]; moig_mc_a0a1a2[i,2,j] = se[1]; moig_mc_a0a1a2[i,3,j] = rbias[1]; moig_mc_a0a1a2[i,4,j] = cp95[1]
moig_mc_a0a1a2[i,5,j] = mles[2]; moig_mc_a0a1a2[i,6,j] = se[2]; moig_mc_a0a1a2[i,7,j] = rbias[2]; moig_mc_a0a1a2[i,8,j] = cp95[2]
moig_mc_a0a1a2[i,9,j] = mles[3]; moig_mc_a0a1a2[i,10,j] = se[3]; moig_mc_a0a1a2[i,11,j] = rbias[3]; moig_mc_a0a1a2[i,12,j] = cp95[3]
moig_mc_b0b1b2[i,1,j] = mles[4]; moig_mc_b0b1b2[i,2,j] = se[4]; moig_mc_b0b1b2[i,3,j] = rbias[4]; moig_mc_b0b1b2[i,4,j] = cp95[4]
moig_mc_b0b1b2[i,5,j] = mles[5]; moig_mc_b0b1b2[i,6,j] = se[5]; moig_mc_b0b1b2[i,7,j] = rbias[5]; moig_mc_b0b1b2[i,8,j] = cp95[5]
moig_mc_b0b1b2[i,9,j] = mles[6]; moig_mc_b0b1b2[i,10,j] = se[6]; moig_mc_b0b1b2[i,11,j] = rbias[6]; moig_mc_b0b1b2[i,12,j] = cp95[6]
moig_mc_lambda[i,1,j] = mles[7]; moig_mc_lambda[i,2,j] = se[7]; moig_mc_lambda[i,3,j] = rbias[7]; moig_mc_lambda[i,4,j] = cp95[7]
## salvando o percentual censura dos dados
moig_mc_cens[i,,j] = 1-(sum(dados.reg.moig[,2])/n_amostral[j])
## Salvando os resultados em um arquivo .csv
if(i==n_replicas){
write.csv2(moig_mc_a0a1a2[,,j], file = paste("resumos_freq_MC_reg_MO_IG/","moig_mc_a0a1a2_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
write.csv2(moig_mc_b0b1b2[,,j], file = paste("resumos_freq_MC_reg_MO_IG/","moig_mc_b0b1b2_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
write.csv2(moig_mc_lambda[,,j], file = paste("resumos_freq_MC_reg_MO_IG/","moig_mc_lambda_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
write.csv2(moig_mc_cens[,,j], file = paste("resumos_freq_MC_reg_MO_IG/","moig_mc_cens_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
}
}
}
setwd('C:/Users/dioni/OneDrive - University of São Paulo/Doutorado em Estatística/2024.2/2_Topicos_Avancados_de_Pesquisa_I/R_code/covariates/MO_Gompertz')
hist(runif(n=500,0,1))
hist(runif(n=500,0,1))
hist(runif(n=500,0,1))
hist(runif(n=500,0,1))
dev.off()
#setwd('C:/Users/dioni/OneDrive - University of São Paulo/Doutorado em Estatística/2024.2/2_Topicos_Avancados_de_Pesquisa_I/R_code/covariates/MO_IG')
## ---
## 1. Base functions ====
## ---
ft_IG = function(t,alpha,beta){
den = (1/sqrt(2*pi*beta*t^3))*exp((-(1/(2*beta*t)))*(1-alpha*t)^2)
return(den)
}
Ft_IG = function(t,alpha,beta){
arg1 = (alpha*t-1)/sqrt(beta*t)
arg2 = (-alpha*t-1)/sqrt(beta*t)
Ft = pnorm(q=arg1,mean=0,sd=1) + (exp(2*alpha/beta)*pnorm(q=arg2,mean=0,sd=1))
return(Ft)
}
St_IG = function(t,alpha,beta){
arg1 = (alpha*t-1)/sqrt(beta*t)
arg2 = (-alpha*t-1)/sqrt(beta*t)
Ft = pnorm(q=arg1,mean=0,sd=1) + (exp(2*alpha/beta)*pnorm(q=arg2,mean=0,sd=1))
return(1-Ft)
}
# MO Inverse Gaussian
ftmo_IG = function(t,alpha,beta,lambda){
num = lambda*ft_IG(t=t,alpha=alpha,beta=beta)
dem = (1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta)))^2
return(num/dem)
}
Stmo_IG = function(t,alpha,beta,lambda){
num = lambda*St_IG(t=t,alpha=alpha,beta=beta)
dem = 1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta))
return(num/dem)
}
Ftmo_IG = function(t,alpha,beta,lambda){
num = lambda*St_IG(t=t,alpha=alpha,beta=beta)
dem = 1-((1-lambda)*St_IG(t=t,alpha=alpha,beta=beta))
return(1-(num/dem))
}
# ---
# 2: Algoritmo gerador de dados
# ---
gen.cure.reg.moig = function(n,as,bs,xa,xb,l){
finv.moig = function(t,alpha,beta,lambda,unif){Ftmo_IG(t=t,alpha=alpha,beta=beta,lambda=lambda) - unif}
ger.moig = function(alpha,beta,lambda,unif){t=uniroot(finv.moig,c(0,1000),tol=0.01,alpha=alpha,beta=beta,lambda=lambda,unif=unif);return(t$root)}
## individual parameters
a = cbind(1,xa) %*% as
b = exp(cbind(1,xb) %*% bs)
p_base = 1-exp(2*a/b)
p_cure = (l*p_base)/(l*p_base+1-p_base)
t = rep(NA,n)
for(i in 1:n){
rmi = rbinom(n=1,size=1,prob=1-p_cure[i,])
uni = runif(n=1,0,max=1-p_cure[i,])
t[i] = ifelse(rmi==0, Inf, ger.moig(alpha=a[i,],beta=b[i,],lambda=l,unif=uni))
}
t_finite = ifelse(t==Inf,0,t)
u2 = runif(n=n,0,max(t_finite))
t2 = pmin(t,u2); delta = ifelse(t<u2,1,0)
return(cbind(t2,delta,xa,xb))
}
## ---
## 3. Tables to save data ====
## ---
n_replicas = 10                         ## number of Monte Carlo replicates
ncols_mc = 4                             ## numero of information in each replicate (mean,sd,bias,cp)
n_amostral = c(50, 100, 500, 1000, 5000) ## sample sizes to study
## Tables
## as = (a0, a1, a2)
moig_mc_a0a1a2 = array(data=0, dim = c(n_replicas, ncols_mc*3, length(n_amostral)),
dimnames = list(1:n_replicas,rep(c("mean", "sd", "bias", "cp"),3),n_amostral))
## bs = (b0, b1, b2)
moig_mc_b0b1b2 = array(data=0, dim = c(n_replicas, ncols_mc*3, length(n_amostral)),
dimnames = list(1:n_replicas,rep(c("mean", "sd", "bias", "cp"),3),n_amostral))
## lambda
moig_mc_lambda = array(data=0, dim = c(n_replicas, ncols_mc, length(n_amostral)),
dimnames = list(1:n_replicas,c("mean", "sd", "bias", "cp"),n_amostral))
## Censura
moig_mc_cens = array(data=0, dim = c(n_replicas, 1, length(n_amostral)))
## Scenarios
## Parameters information
a0 = c(-1, 0.5, 0.2)
b0 = c(-1.1, 1.8, 0.8)
l0 = 0.5
params=c(a0,b0,l0)
for(j in 1:length(n_amostral)){
for(i in 1:n_replicas){
print(paste("Realização Monte Carlo: ", i, ", tamanho amostral:", n_amostral[j]))
## covariates data
xa1 = rbinom(n=n_amostral[j],size=1,prob=0.7); xa2 = runif(n=n_amostral[j],0,1)
xb1 = rbinom(n=n_amostral[j],size=1,prob=0.5); xb2 = runif(n=n_amostral[j],0,1)
xa0 = cbind(xa1, xa2)
xb0 = cbind(xb1, xb2)
dados.reg.moig = gen.cure.reg.moig(n=n_amostral[j],as=a0,bs=b0,xa=xa0,xb=xb0,l=l0)
dados.reg.moig = as.data.frame(dados.reg.moig)
# Data and stan function
data_regmoig = list(N = dim(dados.reg.moig)[1],
p = dim(cbind(1,dados.reg.moig[,3:4]))[2],
s = dim(cbind(1,dados.reg.moig[,5:6]))[2],
time = dados.reg.moig[,1],
delta = dados.reg.moig[,2],
xa = cbind(1,dados.reg.moig[,3:4]),
xb = cbind(1,dados.reg.moig[,5:6]))
## Run the Bayesian model
regmoigfit = stan(file = 'cod_regmoig.stan', data = data_regmoig,
chains = 1, iter=50, warmup=10)
## Extract posterior samples
regmoigfit_post_samples = extract(regmoigfit)
## posterior mean
ma0=mean(regmoigfit_post_samples$as[,1])
ma1=mean(regmoigfit_post_samples$as[,2])
ma2=mean(regmoigfit_post_samples$as[,3])
mb0=mean(regmoigfit_post_samples$bs[,1])
mb1=mean(regmoigfit_post_samples$bs[,2])
mb2=mean(regmoigfit_post_samples$bs[,3])
mlamb=mean(regmoigfit_post_samples$lambda)
post_mean=c(ma0,ma1,ma2,mb0,mb1,mb2,mlamb)
## posterior standard deviation
sda0=sd(regmoigfit_post_samples$as[,1])
sda1=sd(regmoigfit_post_samples$as[,2])
sda2=sd(regmoigfit_post_samples$as[,3])
sdb0=sd(regmoigfit_post_samples$bs[,1])
sdb1=sd(regmoigfit_post_samples$bs[,2])
sdb2=sd(regmoigfit_post_samples$bs[,3])
sdlamb=sd(regmoigfit_post_samples$lambda)
post_sd=c(sda0,sda1,sda2,sdb0,sdb1,sdb2,sdlamb)
## relative bias
rbias = (post_mean-params)/params*100
## coverage probability (95%)
q025a0 = quantile(regmoigfit_post_samples$as[,1],probs=0.025);q975a0 = quantile(regmoigfit_post_samples$as[,1],probs=0.975)
q025a1 = quantile(regmoigfit_post_samples$as[,2],probs=0.025);q975a1 = quantile(regmoigfit_post_samples$as[,2],probs=0.975)
q025a2 = quantile(regmoigfit_post_samples$as[,3],probs=0.025);q975a2 = quantile(regmoigfit_post_samples$as[,3],probs=0.975)
q025b0 = quantile(regmoigfit_post_samples$bs[,1],probs=0.025);q975b0 = quantile(regmoigfit_post_samples$bs[,1],probs=0.975)
q025b1 = quantile(regmoigfit_post_samples$bs[,2],probs=0.025);q975b1 = quantile(regmoigfit_post_samples$bs[,2],probs=0.975)
q025b2 = quantile(regmoigfit_post_samples$bs[,3],probs=0.025);q975b2 = quantile(regmoigfit_post_samples$bs[,3],probs=0.975)
q025lamb = quantile(regmoigfit_post_samples$lambda,probs=0.025);q975lamb = quantile(regmoigfit_post_samples$lambda,probs=0.975)
qinf025 = c(q025a0,q025a1,q025a2,q025b0,q025b1,q025b2,q025lamb)
qsup975 = c(q975a0,q975a1,q975a2,q975b0,q975b1,q975b2,q975lamb)
cpost95 = as.integer((params >= qinf025) & (params <= qsup975))
cpost95
## salvando valores
moig_mc_a0a1a2[i,1,j] = post_mean[1]; moig_mc_a0a1a2[i,2,j] = post_sd[1]; moig_mc_a0a1a2[i,3,j] = rbias[1]; moig_mc_a0a1a2[i,4,j] = cpost95[1]
moig_mc_a0a1a2[i,5,j] = post_mean[2]; moig_mc_a0a1a2[i,6,j] = post_sd[2]; moig_mc_a0a1a2[i,7,j] = rbias[2]; moig_mc_a0a1a2[i,8,j] = cpost95[2]
moig_mc_a0a1a2[i,9,j] = post_mean[3]; moig_mc_a0a1a2[i,10,j] = post_sd[3]; moig_mc_a0a1a2[i,11,j] = rbias[3]; moig_mc_a0a1a2[i,12,j] = cpost95[3]
moig_mc_b0b1b2[i,1,j] = post_mean[4]; moig_mc_b0b1b2[i,2,j] = post_sd[4]; moig_mc_b0b1b2[i,3,j] = rbias[4]; moig_mc_b0b1b2[i,4,j] = cpost95[4]
moig_mc_b0b1b2[i,5,j] = post_mean[5]; moig_mc_b0b1b2[i,6,j] = post_sd[5]; moig_mc_b0b1b2[i,7,j] = rbias[5]; moig_mc_b0b1b2[i,8,j] = cpost95[5]
moig_mc_b0b1b2[i,9,j] = post_mean[6]; moig_mc_b0b1b2[i,10,j] = post_sd[6]; moig_mc_b0b1b2[i,11,j] = rbias[6]; moig_mc_b0b1b2[i,12,j] = cpost95[6]
moig_mc_lambda[i,1,j] = post_mean[7]; moig_mc_lambda[i,2,j] = post_sd[7]; moig_mc_lambda[i,3,j] = rbias[7]; moig_mc_lambda[i,4,j] = cpost95[7]
## salvando o percentual censura dos dados
moig_mc_cens[i,,j] = 1-(sum(dados.reg.moig[,2])/n_amostral[j])
## Salvando os resultados em um arquivo .csv
if(i==n_replicas){
write.csv2(moig_mc_a0a1a2[,,j], file = paste("resumos_Bayes_MC_reg_MO_IG/","moig_mc_a0a1a2_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
write.csv2(moig_mc_b0b1b2[,,j], file = paste("resumos_Bayes_MC_reg_MO_IG/","moig_mc_b0b1b2_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
write.csv2(moig_mc_lambda[,,j], file = paste("resumos_Bayes_MC_reg_MO_IG/","moig_mc_lambda_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
write.csv2(moig_mc_cens[,,j], file = paste("resumos_Bayes_MC_reg_MO_IG/","moig_mc_cens_", "rep_",n_replicas, "_n_",n_amostral[j], ".csv", sep=""))
}
}
}
