pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
n=1000
a0=1
b0=10
th0=0.85 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.7 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
n=1000
a0=1
b0=10
th0=0.7 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=1
b0=10
th0=0.7 ## Entre 0 e 1
l0=2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
n=1000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
cod_modagum = "
data {
int<lower=0> N;                         // tamanho amostral
array[N] real time;                    //  tempo de falha observado
array[N] int<lower=0, upper=1> delta; //   indicador do evento
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
real<lower=0,upper=1> theta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ gamma(0.01,0.01);
beta ~ gamma(0.25,0.25);
theta ~ beta(1,1);
lambda ~ gamma(0.25,0.25);
// Definição manual da log-verossimilhança
for (i in 1:N){
real denom = lambda + (((1-lambda)*theta*beta)/(beta + theta*time[i]^(-alpha)));
target += delta[i]*log(lambda*alpha*beta*theta^2*time[i]^(-alpha-1)) -
delta[i]*log((beta+theta*time[i]^(-alpha))^2 * denom^2) +
(1-delta[i])*log(lambda*(1 - (theta*beta)/(beta+theta*time[i]^(-alpha)))) -
(1-delta[i])*log(denom);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_modagum, con = "cod_modagum.stan")
data_cod_modagum = list(N = dim(dados.modagum)[1],
time = dados.modagum[,1],
delta = dados.modagum[,2])
## Compilar e rodar o modelo
modagum = stan(file = 'cod_modagum.stan', data = data_cod_modagum,
chains = 1, iter = 2000, warmup = 200)
modagum_post_samples = extract(modagum)
plot(modagum_post_samples$alpha, type='l')
abline(h=a0,col="red", lwd=2)
plot(modagum_post_samples$beta, type='l')
abline(h=b0,col="red", lwd=2)
plot(modagum_post_samples$theta, type='l')
abline(h=th0,col="red", lwd=2)
plot(modagum_post_samples$lambda, type='l')
abline(h=th0,col="red", lwd=2)
a0;b0;th0;l0
summary(modagum)$summary
cod_modagum = "
data {
int<lower=0> N;                         // tamanho amostral
array[N] real time;                    //  tempo de falha observado
array[N] int<lower=0, upper=1> delta; //   indicador do evento
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
real<lower=0,upper=1> theta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ gamma(0.01,0.01);
beta ~ gamma(0.01,0.01);
theta ~ beta(1,1);
lambda ~ gamma(0.01,0.01);
// Definição manual da log-verossimilhança
for (i in 1:N){
real denom = lambda + (((1-lambda)*theta*beta)/(beta + theta*time[i]^(-alpha)));
target += delta[i]*log(lambda*alpha*beta*theta^2*time[i]^(-alpha-1)) -
delta[i]*log((beta+theta*time[i]^(-alpha))^2 * denom^2) +
(1-delta[i])*log(lambda*(1 - (theta*beta)/(beta+theta*time[i]^(-alpha)))) -
(1-delta[i])*log(denom);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_modagum, con = "cod_modagum.stan")
data_cod_modagum = list(N = dim(dados.modagum)[1],
time = dados.modagum[,1],
delta = dados.modagum[,2])
## Compilar e rodar o modelo
modagum = stan(file = 'cod_modagum.stan', data = data_cod_modagum,
chains = 1, iter = 2000, warmup = 200)
kdagum_post_samples = extract(mod_kdagum)
plot(kdagum_post_samples$alpha, type='l')
modagum_post_samples = extract(modagum)
plot(modagum_post_samples$alpha, type='l')
abline(h=a0,col="red", lwd=2)
plot(modagum_post_samples$beta, type='l')
abline(h=b0,col="red", lwd=2)
plot(modagum_post_samples$theta, type='l')
abline(h=th0,col="red", lwd=2)
plot(modagum_post_samples$lambda, type='l')
abline(h=th0,col="red", lwd=2)
a0;b0;th0;l0
summary(modagum)$summary
n=2000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
## Estimação via stan
cod_modagum = "
data {
int<lower=0> N;                         // tamanho amostral
array[N] real time;                    //  tempo de falha observado
array[N] int<lower=0, upper=1> delta; //   indicador do evento
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
real<lower=0,upper=1> theta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ gamma(0.01,0.01);
beta ~ gamma(0.01,0.01);
theta ~ beta(1,1);
lambda ~ gamma(0.01,0.01);
// Definição manual da log-verossimilhança
for (i in 1:N){
real denom = lambda + (((1-lambda)*theta*beta)/(beta + theta*time[i]^(-alpha)));
target += delta[i]*log(lambda*alpha*beta*theta^2*time[i]^(-alpha-1)) -
delta[i]*log((beta+theta*time[i]^(-alpha))^2 * denom^2) +
(1-delta[i])*log(lambda*(1 - (theta*beta)/(beta+theta*time[i]^(-alpha)))) -
(1-delta[i])*log(denom);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_modagum, con = "cod_modagum.stan")
#dados.kig
## Organizando os dados [data list]
data_cod_modagum = list(N = dim(dados.modagum)[1],
time = dados.modagum[,1],
delta = dados.modagum[,2])
## Compilar e rodar o modelo
modagum = stan(file = 'cod_modagum.stan', data = data_cod_modagum,
chains = 1, iter = 2000, warmup = 200)
modagum_post_samples = extract(modagum)
plot(modagum_post_samples$alpha, type='l')
abline(h=a0,col="red", lwd=2)
plot(modagum_post_samples$beta, type='l')
abline(h=b0,col="red", lwd=2)
plot(modagum_post_samples$theta, type='l')
abline(h=th0,col="red", lwd=2)
plot(modagum_post_samples$lambda, type='l')
abline(h=th0,col="red", lwd=2)
a0;b0;th0;l0
summary(modagum)$summary
fbaseest_modagum = 1-mean(modagum_post_samples$theta);
fc_est_modgaum = (mean(modagum_post_samples$lambda)*fbaseest_modagum)/(mean(modagum_post_samples$lambda)*fbaseest_modagum + 1 - fbaseest_modagum)
fc_est_modgaum
t_grid = seq(0,100,by=0.01)
st_modagum(t=t_grid,
alpha = mean(modagum_post_samples$alpha),
beta=mean(modagum_post_samples$beta),
theta = mean(modagum_post_samples$theta),
lambda = mean(modagum_post_samples$lambda))
surv_est_modagum = st_modagum(t=t_grid,
alpha = mean(modagum_post_samples$alpha),
beta=mean(modagum_post_samples$beta),
theta = mean(modagum_post_samples$theta),
lambda = mean(modagum_post_samples$lambda))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
lines(t_grid,surv_est_modagum, lwd=2, col = "deeppink")
abline(h=fc_est_modgaum, lwd=2, col='steelblue')
n=2000
a0=2
b0=5
th0=0.7 ## Entre 0 e 1
l0=1.2
pbase = 1-th0; p0 = (l0*pbase)/(l0*pbase + 1 - pbase); p0
dados.modagum = gen.cure.modagum(n=n,a=a0,b=b0,th=th0,lb=l0,p=p0)
# Verificando na curva de Kaplan-Meier
surv_obj = Surv(dados.modagum[,1], dados.modagum[,2])
km_fit = survfit(surv_obj  ~ 1)
par(mfrow=c(1,1))
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_modagum_t_grid = st_modagum(t=t_grid,alpha=a0,beta=b0,theta=th0,lambda=l0)
lines(t_grid,st_modagum_t_grid, lwd=2, col = "deeppink")
abline(h=p0, lwd=2, col='steelblue')
cod_modagum = "
data {
int<lower=0> N;                         // tamanho amostral
array[N] real time;                    //  tempo de falha observado
array[N] int<lower=0, upper=1> delta; //   indicador do evento
}
parameters {
real<lower=0> alpha;
real<lower=0> beta;
real<lower=0,upper=1> theta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ gamma(0.1,0.1);
beta ~ gamma(0.1,0.1);
theta ~ beta(100,100);
lambda ~ gamma(0.1,0.1);
// Definição manual da log-verossimilhança
for (i in 1:N){
real denom = lambda + (((1-lambda)*theta*beta)/(beta + theta*time[i]^(-alpha)));
target += delta[i]*log(lambda*alpha*beta*theta^2*time[i]^(-alpha-1)) -
delta[i]*log((beta+theta*time[i]^(-alpha))^2 * denom^2) +
(1-delta[i])*log(lambda*(1 - (theta*beta)/(beta+theta*time[i]^(-alpha)))) -
(1-delta[i])*log(denom);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_modagum, con = "cod_modagum.stan")
data_cod_modagum = list(N = dim(dados.modagum)[1],
time = dados.modagum[,1],
delta = dados.modagum[,2])
## Compilar e rodar o modelo
modagum = stan(file = 'cod_modagum.stan', data = data_cod_modagum,
chains = 1, iter = 2000, warmup = 200)
modagum_post_samples = extract(modagum)
plot(modagum_post_samples$alpha, type='l')
abline(h=a0,col="red", lwd=2)
plot(modagum_post_samples$beta, type='l')
abline(h=b0,col="red", lwd=2)
plot(modagum_post_samples$theta, type='l')
abline(h=th0,col="red", lwd=2)
plot(modagum_post_samples$lambda, type='l')
abline(h=th0,col="red", lwd=2)
2/4
