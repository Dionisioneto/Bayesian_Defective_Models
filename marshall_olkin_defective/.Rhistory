k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
1-mean(dados.kgz[,2])
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
n=2000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
cod_kgtz_stan = "
data{
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters{
real alpha;
real<lower=0> beta;
real<lower=0> psi;
real<lower=0> kappa;
}
model{
// prioris
alpha ~ normal(-1,10);
beta ~ gamma(0.25,0.25);
kappa ~ gamma(0.25,0.25);
psi ~ gamma(0.25,0.25);
// Definição manual da função de verossimilhança
for(i in 1:N){
target += delta[i]*(log(kappa*psi*beta*exp(alpha*time[i])*exp((beta-beta*exp(alpha*time[i]))/alpha)*(1-exp((beta-beta*exp(alpha*time[i]))/alpha))^(psi-1) * (1-(1-(exp((beta-beta*exp(alpha*time[i]))/alpha)))^psi)^(kappa-1))) +
(1 - delta[i])*(log((1 - (1 - exp((beta-beta*exp(alpha*time[i]))/alpha))^psi)^kappa));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_kgtz_stan, con = "cod_kgtz_stan.stan")
## Organizando os dados [data list]
#dados.kgz
data_kgz = list(N = dim(dados.kgz)[1],
time = dados.kgz[,1],
delta = dados.kgz[,2])
## Compilar e rodar o modelo
kgzfit = stan(file = 'cod_kgtz_stan.stan', data = data_kgz,
chains = 1, iter = 2000, warmup = 200)
kgzfit_post_samples = extract(kgzfit)
plot(kgzfit_post_samples$alpha, type='l')
abline(h=a0kg,col="red", lwd=2)
plot(kgzfit_post_samples$beta, type='l')
abline(h=b0kg,col="red", lwd=2)
plot(kgzfit_post_samples$psi, type='l')
abline(h=psi0kg,col="red", lwd=2)
plot(kgzfit_post_samples$kappa, type='l')
abline(h=k0kg,col="red", lwd=2)
## estimativas pontuais
mean_alpha = mean(kgzfit_post_samples$alpha)
mean_beta = mean(kgzfit_post_samples$beta)
mean_psi = mean(kgzfit_post_samples$psi)
mean_kappa = mean(kgzfit_post_samples$kappa)
a0kg;b0kg;psi0kg;k0kg
summary(kgzfit)$summary
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
median(kgzfit_post_samples$beta)
a0kg;b0kg;psi0kg;k0kg
mean_alpha;mean_beta;mean_kappa;mean_psi
t_grid = seq(0,100,by=0.01)
st_t_est = st_Kgompertz(t=t_grid,alpha=mean_alpha,
beta=mean_beta,kappa=mean_kappa,psi=mean_psi)
lines(t_grid,st_t_est, lwd=2, col = "deeppink")
fc_base_est = exp(mean_beta/mean_alpha)
fc_est = (1-(1-fc_base_est)^mean_psi)^mean_kappa
abline(h=fc_est, lwd=2, col='steelblue')
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
cod_kgtz_stan = "
data{
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters{
real alpha;
real<lower=0> beta;
real<lower=0> psi;
real<lower=0> kappa;
}
model{
// prioris
alpha ~ normal(-1,10);
beta ~ gamma(0.25,0.25);
kappa ~ cauchy(0,5);
psi ~ cauchy(0,5);
// Definição manual da função de verossimilhança
for(i in 1:N){
target += delta[i]*(log(kappa*psi*beta*exp(alpha*time[i])*exp((beta-beta*exp(alpha*time[i]))/alpha)*(1-exp((beta-beta*exp(alpha*time[i]))/alpha))^(psi-1) * (1-(1-(exp((beta-beta*exp(alpha*time[i]))/alpha)))^psi)^(kappa-1))) +
(1 - delta[i])*(log((1 - (1 - exp((beta-beta*exp(alpha*time[i]))/alpha))^psi)^kappa));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_kgtz_stan, con = "cod_kgtz_stan.stan")
## Organizando os dados [data list]
#dados.kgz
data_kgz = list(N = dim(dados.kgz)[1],
time = dados.kgz[,1],
delta = dados.kgz[,2])
## Compilar e rodar o modelo
kgzfit = stan(file = 'cod_kgtz_stan.stan', data = data_kgz,
chains = 1, iter = 2000, warmup = 200)
kgzfit_post_samples = extract(kgzfit)
plot(kgzfit_post_samples$alpha, type='l')
abline(h=a0kg,col="red", lwd=2)
plot(kgzfit_post_samples$beta, type='l')
abline(h=b0kg,col="red", lwd=2)
plot(kgzfit_post_samples$psi, type='l')
abline(h=psi0kg,col="red", lwd=2)
plot(kgzfit_post_samples$kappa, type='l')
abline(h=k0kg,col="red", lwd=2)
a0kg;b0kg;psi0kg;k0kg
summary(kgzfit)$summary
cod_kgtz_stan = "
data{
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters{
real alpha;
real<lower=0> beta;
real<lower=0> psi;
real<lower=0> kappa;
}
model{
// prioris
alpha ~ normal(-1,1);
beta ~ gamma(0.25,0.25);
kappa ~ gamma(0.25,0.25);
psi ~ gamma(0.25,0.25);
// Definição manual da função de verossimilhança
for(i in 1:N){
target += delta[i]*(log(kappa*psi*beta*exp(alpha*time[i])*exp((beta-beta*exp(alpha*time[i]))/alpha)*(1-exp((beta-beta*exp(alpha*time[i]))/alpha))^(psi-1) * (1-(1-(exp((beta-beta*exp(alpha*time[i]))/alpha)))^psi)^(kappa-1))) +
(1 - delta[i])*(log((1 - (1 - exp((beta-beta*exp(alpha*time[i]))/alpha))^psi)^kappa));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_kgtz_stan, con = "cod_kgtz_stan.stan")
## Organizando os dados [data list]
#dados.kgz
data_kgz = list(N = dim(dados.kgz)[1],
time = dados.kgz[,1],
delta = dados.kgz[,2])
## Compilar e rodar o modelo
kgzfit = stan(file = 'cod_kgtz_stan.stan', data = data_kgz,
chains = 1, iter = 2000, warmup = 200)
kgzfit_post_samples = extract(kgzfit)
plot(kgzfit_post_samples$alpha, type='l')
abline(h=a0kg,col="red", lwd=2)
plot(kgzfit_post_samples$beta, type='l')
abline(h=b0kg,col="red", lwd=2)
plot(kgzfit_post_samples$psi, type='l')
abline(h=psi0kg,col="red", lwd=2)
plot(kgzfit_post_samples$kappa, type='l')
abline(h=k0kg,col="red", lwd=2)
## estimativas pontuais
mean_alpha = mean(kgzfit_post_samples$alpha)
mean_beta = mean(kgzfit_post_samples$beta)
mean_psi = mean(kgzfit_post_samples$psi)
mean_kappa = mean(kgzfit_post_samples$kappa)
a0kg;b0kg;psi0kg;k0kg
summary(kgzfit)$summary
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
median(kgzfit_post_samples$beta)
a0kg;b0kg;psi0kg;k0kg
mean_alpha;mean_beta;mean_kappa;mean_psi
t_grid = seq(0,100,by=0.01)
st_t_est = st_Kgompertz(t=t_grid,alpha=mean_alpha,
beta=mean_beta,kappa=mean_kappa,psi=mean_psi)
lines(t_grid,st_t_est, lwd=2, col = "deeppink")
fc_base_est = exp(mean_beta/mean_alpha)
fc_est = (1-(1-fc_base_est)^mean_psi)^mean_kappa
abline(h=fc_est, lwd=2, col='steelblue')
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
1/0.1
1/0.1^2
1/0.01^2
1/0.001^2
1/1^2
1/0.1^2
1/0.25^2
n=10000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
# ---
# 5.3 Programação no stan  ====
# ---
## Portanto, no objeto dados.mog,
## temos os dados do tempo de falha e o indicador de censura.
## Vamos atribuir uma priori para alpha, beta e lambda não informativas.
## Revisar o código, pois o amaostrador não está rodando nos valores iniciais
cod_kgtz_stan = "
data{
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters{
real alpha;
real<lower=0> beta;
real<lower=0> psi;
real<lower=0> kappa;
}
model{
// prioris
alpha ~ normal(-1,10);
beta ~ gamma(0.25,0.25);
kappa ~ gamma(0.25,0.25);
psi ~ gamma(0.25,0.25);
// Definição manual da função de verossimilhança
for(i in 1:N){
target += delta[i]*(log(kappa*psi*beta*exp(alpha*time[i])*exp((beta-beta*exp(alpha*time[i]))/alpha)*(1-exp((beta-beta*exp(alpha*time[i]))/alpha))^(psi-1) * (1-(1-(exp((beta-beta*exp(alpha*time[i]))/alpha)))^psi)^(kappa-1))) +
(1 - delta[i])*(log((1 - (1 - exp((beta-beta*exp(alpha*time[i]))/alpha))^psi)^kappa));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_kgtz_stan, con = "cod_kgtz_stan.stan")
n=10000
a0kg=-1
b0kg=1
psi0kg=2
k0kg=2
pgkg = exp(b0kg/a0kg)
p0kg = (1-(1-pgkg)^psi0kg)^k0kg; p0kg
dados.kgz=gen.cure.kgz(n=n,a=a0kg,b=b0kg,k=k0kg,ps=psi0kg,p=p0kg)
#head(dados.kgz)
#1-mean(dados.kgz[,2])
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.kgz[,1], dados.kgz[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = st_Kgompertz(t=t_grid,alpha=a0kg,
beta=b0kg,kappa=k0kg,psi=psi0kg)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0kg, lwd=2, col='steelblue')
# ---
# 5.3 Programação no stan  ====
# ---
## Portanto, no objeto dados.mog,
## temos os dados do tempo de falha e o indicador de censura.
## Vamos atribuir uma priori para alpha, beta e lambda não informativas.
## Revisar o código, pois o amaostrador não está rodando nos valores iniciais
cod_kgtz_stan = "
data{
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters{
real alpha;
real<lower=0> beta;
real<lower=0> psi;
real<lower=0> kappa;
}
model{
// prioris
alpha ~ normal(-1,10);
beta ~ gamma(0.25,0.25);
kappa ~ gamma(0.25,0.25);
psi ~ gamma(0.25,0.25);
// Definição manual da função de verossimilhança
for(i in 1:N){
target += delta[i]*(log(kappa*psi*beta*exp(alpha*time[i])*exp((beta-beta*exp(alpha*time[i]))/alpha)*(1-exp((beta-beta*exp(alpha*time[i]))/alpha))^(psi-1) * (1-(1-(exp((beta-beta*exp(alpha*time[i]))/alpha)))^psi)^(kappa-1))) +
(1 - delta[i])*(log((1 - (1 - exp((beta-beta*exp(alpha*time[i]))/alpha))^psi)^kappa));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_kgtz_stan, con = "cod_kgtz_stan.stan")
data_kgz = list(N = dim(dados.kgz)[1],
time = dados.kgz[,1],
delta = dados.kgz[,2])
## Compilar e rodar o modelo
kgzfit = stan(file = 'cod_kgtz_stan.stan', data = data_kgz,
chains = 1, iter = 2000, warmup = 200)
kgzfit_post_samples = extract(kgzfit)
plot(kgzfit_post_samples$alpha, type='l')
abline(h=a0kg,col="red", lwd=2)
plot(kgzfit_post_samples$beta, type='l')
abline(h=b0kg,col="red", lwd=2)
plot(kgzfit_post_samples$psi, type='l')
abline(h=psi0kg,col="red", lwd=2)
plot(kgzfit_post_samples$kappa, type='l')
abline(h=k0kg,col="red", lwd=2)
