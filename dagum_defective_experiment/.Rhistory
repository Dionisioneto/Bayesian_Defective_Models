return(mu)
}
getsigma2 = function(media,var){
numerador = exp(2*log(media))
denominador = 1 + (var/exp(2*log(media)))
mu = (1/2)*log(numerador/denominador)
sigma2 = 2*(log(media)-mu)
return(sigma2)
}
dados = c(138,140,141,143,145,146,146,148,
148,149,149,150,151,151,151,151,152,152,
153,153,153,155,156,156,157,158,158,159,
159,159,159,159,159,160,161,161,161,162,
163,163,163,163,164,164,164,164,165,166,
166,166,166,167,167,170,170,172,172,173,
174,176,179,179,180,183,184,185,187,189,
197)
iter = 5000
alpha = rep(NA,iter)
beta = rep(NA,iter)
gamma = rep(NA,iter)
alpha[1]= 120
beta[1] = 100
gamma[1] = 100
naceitealpha = 0
naceitebeta = 0
## inicio do laco
mu_propalpha = getmu(media=130,var=5^2)
sigma2_propalpha = getsigma2(media=10,var=2)
mu_propbeta = getmu(media=10,var=5^2)
sigma2_propbeta = getsigma2(media=10,var=2)
set.seed(10)
enableJIT(3) ## ajudar a execução do for()
for(i in 2:iter){
gamma[i] = rgamma(n=1,shape=length(dados) + 0.1,
rate=((alpha[i-1]^beta[i-1])*sum(dados^(-1*beta[i-1])))+0.1)
alphaprop = rlnorm(n=1,meanlog=mu_propalpha,sdlog=sigma2_propalpha)
numalpha= logverwig(t=dados,alpha=alphaprop,beta=beta[i-1],gamma=gamma[i])+logpriorigamma(x=alphaprop,a=0.1,b=0.1)+log(dlnorm(x=alpha[i-1],meanlog=mu_propalpha,sdlog=sqrt(sigma2_propalpha)))
demalpha= logverwig(t=dados,alpha=alpha[i-1],beta=beta[i-1],gamma=gamma[i])+logpriorigamma(x=alpha[i-1],a=0.1,b=0.1)+log(dlnorm(x=alphaprop,meanlog=mu_propalpha,sdlog=sqrt(sigma2_propalpha)))
pactalpha = min(1,exp(numalpha-demalpha))
u1 = runif(1,0,1)
if(pactalpha > u1){
alpha[i] = alphaprop
naceitealpha = naceitealpha+1
} else{
alpha[i] = alpha[i-1]
}
betaprop = rlnorm(n=1,meanlog=mu_propbeta,sdlog=sigma2_propbeta)
numbeta= logverwig(t=dados,alpha=alpha[i],beta=betaprop,gamma=gamma[i])+logpriorigamma(x=betaprop,a=0.1,b=0.1)+log(dlnorm(x=beta[i-1],meanlog=mu_propbeta,sdlog=sqrt(sigma2_propbeta)))
dembeta= logverwig(t=dados,alpha=alpha[i],beta=beta[i-1],gamma=gamma[i])+logpriorigamma(x=beta[i-1],a=0.1,b=0.1)+log(dlnorm(x=betaprop,meanlog=mu_propbeta,sdlog=sqrt(sigma2_propbeta)))
pactbeta = min(1,exp(numbeta-dembeta))
u2 = runif(1,0,1)
if(pactbeta > u2){
beta[i] = betaprop
naceitebeta = naceitebeta+1
} else{
beta[i] = beta[i-1]
}
}
naceitealpha/iter
naceitebeta/iter
par(mfrow=c(1,2))
plot(1:iter,gamma,type='l',
ylab=expression(gamma),
xlab = "Iterações",
main="Completo")
plot(1:iter,gamma,type='l', xlim = c(0,8000),
ylab=expression(gamma), xlab = "Iterações",
main="Recorte")
plot(1:iter,alpha,type='l',
ylab=expression(alpha), xlab = "Iterações",
main="Completo")
plot(1:iter,alpha,type='l', xlim = c(0,8000),
ylab=expression(alpha), xlab = "Iterações",
main="Recorte")
plot(1:iter,beta,type='l',
ylab=expression(beta), xlab = "Iterações",
main="Completo")
plot(1:iter,beta,type='l', xlim = c(0,8000),
ylab=expression(beta), xlab = "Iterações",
main="Recorte")
burnin = 5000
gamma = gamma[-c(1:burnin)]
alpha = alpha[-c(1:burnin)]
beta = beta[-c(1:burnin)]
acf(gamma,xlab="Salto",main=expression(gamma));#acf(gamma,plot=FALSE)
acf(alpha,xlab="Salto",main=expression(alpha));#acf(alpha,plot=FALSE)
library(compiler)
## ----
## Função de log-verossimilhaça
## ----
logverwig = function(t,alpha,beta,gamma){
part1 = length(t)*log(gamma) + length(t)*log(beta) + length(t)*beta*log(alpha)
part2 = (-beta-1)*sum(log(t))
part3 = -gamma*alpha^(beta)*sum(t^(-beta))
loglik = part1+part2+part3
return(loglik)
}
## Distribuição a priori gamma
logpriorigamma = function(x,a,b){
logp = (a-1)*log(x) - b*x
return(logp)
}
## Funções para obter os parametros da log normal
## de acordo com uma localização
getmu = function(media,var){
numerador = exp(2*log(media))
denominador = 1 + (var/exp(2*log(media)))
mu = (1/2)*log(numerador/denominador)
return(mu)
}
getsigma2 = function(media,var){
numerador = exp(2*log(media))
denominador = 1 + (var/exp(2*log(media)))
mu = (1/2)*log(numerador/denominador)
sigma2 = 2*(log(media)-mu)
return(sigma2)
}
### ----
### Inicio do algoritmo de Gibbs com
### passos de metropolis
### ----
## dados obtidos para os 69 bovinos que sofreram
## o evento de interesse.
dados = c(138,140,141,143,145,146,146,148,
148,149,149,150,151,151,151,151,152,152,
153,153,153,155,156,156,157,158,158,159,
159,159,159,159,159,160,161,161,161,162,
163,163,163,163,164,164,164,164,165,166,
166,166,166,167,167,170,170,172,172,173,
174,176,179,179,180,183,184,185,187,189,
197)
iter = 10000
alpha = rep(NA,iter)
beta = rep(NA,iter)
gamma = rep(NA,iter)
alpha[1]= 120
beta[1] = 100
gamma[1] = 100
naceitealpha = 0
naceitebeta = 0
## inicio do laco
mu_propalpha = getmu(media=130,var=5^2)
sigma2_propalpha = getsigma2(media=10,var=2)
mu_propbeta = getmu(media=10,var=5^2)
sigma2_propbeta = getsigma2(media=10,var=2)
set.seed(10)
enableJIT(3) ## ajudar a execução do for()
for(i in 2:iter){
gamma[i] = rgamma(n=1,shape=length(dados) + 0.1,
rate=((alpha[i-1]^beta[i-1])*sum(dados^(-1*beta[i-1])))+0.1)
alphaprop = rlnorm(n=1,meanlog=mu_propalpha,sdlog=sigma2_propalpha)
numalpha= logverwig(t=dados,alpha=alphaprop,beta=beta[i-1],gamma=gamma[i])+logpriorigamma(x=alphaprop,a=0.1,b=0.1)+log(dlnorm(x=alpha[i-1],meanlog=mu_propalpha,sdlog=sqrt(sigma2_propalpha)))
demalpha= logverwig(t=dados,alpha=alpha[i-1],beta=beta[i-1],gamma=gamma[i])+logpriorigamma(x=alpha[i-1],a=0.1,b=0.1)+log(dlnorm(x=alphaprop,meanlog=mu_propalpha,sdlog=sqrt(sigma2_propalpha)))
pactalpha = min(1,exp(numalpha-demalpha))
u1 = runif(1,0,1)
if(pactalpha > u1){
alpha[i] = alphaprop
naceitealpha = naceitealpha+1
} else{
alpha[i] = alpha[i-1]
}
betaprop = rlnorm(n=1,meanlog=mu_propbeta,sdlog=sigma2_propbeta)
numbeta= logverwig(t=dados,alpha=alpha[i],beta=betaprop,gamma=gamma[i])+logpriorigamma(x=betaprop,a=0.1,b=0.1)+log(dlnorm(x=beta[i-1],meanlog=mu_propbeta,sdlog=sqrt(sigma2_propbeta)))
dembeta= logverwig(t=dados,alpha=alpha[i],beta=beta[i-1],gamma=gamma[i])+logpriorigamma(x=beta[i-1],a=0.1,b=0.1)+log(dlnorm(x=betaprop,meanlog=mu_propbeta,sdlog=sqrt(sigma2_propbeta)))
pactbeta = min(1,exp(numbeta-dembeta))
u2 = runif(1,0,1)
if(pactbeta > u2){
beta[i] = betaprop
naceitebeta = naceitebeta+1
} else{
beta[i] = beta[i-1]
}
}
naceitealpha/iter
naceitebeta/iter
par(mfrow=c(1,2))
plot(1:iter,gamma,type='l',
ylab=expression(gamma),
xlab = "Iterações",
main="Completo")
plot(1:iter,gamma,type='l', xlim = c(0,8000),
ylab=expression(gamma), xlab = "Iterações",
main="Recorte")
bias = function(true,est){(est-true)/true*100}
mogfit
mogfit$Rhat
mogfit
mogfit[,9]
summary(mogfit)
## colunas: a média a posteriori, desvio padrão a posteriori, bias, quantil 2.5%, quantil 97.5%,
ncols =
## 2. Scenario:
summary(mogfit)[,"n_eff"]
## colunas: a média a posteriori, desvio padrão a posteriori, bias, quantil 2.5%, quantil 97.5%,
ncols =
## 2. Scenario:
summary(mogfit)$summary[,"n_eff"]
## colunas: a média a posteriori, desvio padrão a posteriori, bias, quantil 2.5%, quantil 97.5%,
ncols =
## 2. Scenario:
summary(mogfit)$summary[,"n_eff"]
## colunas: a média a posteriori, desvio padrão a posteriori, bias, quantil 2.5%, quantil 97.5%,
ncols =
## 2. Scenario:
summary(mogfit)$summary[,"n_eff"]
sumari$summary[,"n_eff"]
## colunas: a média a posteriori, desvio padrão a posteriori, bias, quantil 2.5%, quantil 97.5%,
ncols =
## 2. Scenario:
sumari = summary(mogfit)
sumari$summary[,"n_eff"]
sumari$summary[,"Rhat"]
sumari$summary[,"n_eff"]
sumari$summary[,"Rhat"]
m_mc = matrix(data=0, nrow = n.replicas, ncol = ncols_mc)
bias = function(true,est){(est-true)/true*100}
## 1. Scenario:
# Alpha = -1.2, Beta = 2, Lambda = 0.8, p = 0.1570
n.replicas = 500
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
m_mc = matrix(data=0, nrow = n.replicas, ncol = ncols_mc)
head(m_mc)
# functions
source("https://github.com/Dionisioneto/Bayesian_Defective_Models/blob/master/marshall_olkin_defective/MO_funcoes_e_geracao.R")
dev.off()
# functions
source("https://github.com/Dionisioneto/Bayesian_Defective_Models/blob/master/marshall_olkin_defective/MO_funcoes_e_geracao.R")
# functions
source("https://raw.githubusercontent.com/Dionisioneto/Bayesian_Defective_Models/refs/heads/master/marshall_olkin_defective/MO_funcoes_e_geracao.R")
bias = function(true,est){(est-true)/true*100}
n.replicas = 500
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
m_mc = matrix(data=0, nrow = n.replicas, ncol = ncols_mc)
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
m_mc = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
n_amostral = c(50, 100, 1000, 10000)
m_mc = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
head(m_mc)
dim(m_mc)
mean(mogfit_post_samples$alpha)
sd(mogfit_post_samples$alpha)
mo_mc_alpha = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_beta = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_lambda = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_p = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_alpha = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_beta = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_lambda = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_p = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
a0mog=-1.2;b0mog=2;l0mog=0.8
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
sumari = summary(mogfit)
sumari$summary
sumari$summary
sumari$summary[,"2.5%"]
sumari$summary[1,"2.5%"]
sumari$summary[1,"97.5%"]
a0
a0mog
a0mog >= sumari$summary[1,"2.5%"] && x <= sumari$summary[1,"97.5%"]
a0mog >= sumari$summary[1,"2.5%"] && a0mog <= sumari$summary[1,"97.5%"]
sum(a0mog >= sumari$summary[1,"2.5%"] && a0mog <= sumari$summary[1,"97.5%"])
sum(a0mog >= sumario_mogfit$summary[1,"2.5%"] && a0mog <= sumario_mogfit$summary[1,"97.5%"])
sumario_mogfit = summary(mogfit)
sum(a0mog >= sumario_mogfit$summary[1,"2.5%"] && a0mog <= sumario_mogfit$summary[1,"97.5%"])
sum(b0mog >= sumario_mogfit$summary[2,"2.5%"] && a0mog <= sumario_mogfit$summary[2,"97.5%"])
sum(l0mog >= sumario_mogfit$summary[3,"2.5%"] && a0mog <= sumario_mogfit$summary[3,"97.5%"])
fc_base_2_5 = exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
fc_mog_2_5 = (sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_mog_2_5
fc_base_2_5 = exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
fc_mog_2_5 = (sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_base_97_5 = exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])
fc_mog_97_5 = (sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5)/(sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5+1-fc_base_97_5)
p0mog
fc_base_2_5 = exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
fc_mog_2_5 = (sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_base_97_5 = exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])
fc_mog_97_5 = (sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5)/(sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5+1-fc_base_97_5)
sum(p0mog >= fc_mog_2_5 && p0mog <= fc_mog_97_5)
p0mog
fc_mog_2_5
fc_mog_97_5
fc_mog_2_5
exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])
exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_base_2_5 = exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
fc_mog_2_5 = (sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_base_97_5 = exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])
fc_mog_97_5 = (sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5)/(sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5+1-fc_base_97_5)
p0mog <= fc_mog_97_5
p0mog
fc_mog_97_5
fc_base_2_5 = exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
fc_mog_2_5 = (sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_mog_2_5
fc_base_97_5 = exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])
fc_mog_97_5 = (sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5)/(sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5+1-fc_base_97_5)
fc_mog_97_5
sumario_mogfit$summary[2,"2.5%"]
sumario_mogfit$summary[1,"2.5%"]
sumario_mogfit$summary[3,"2.5%"]
fc_base_2_5 = exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])
fc_mog_2_5 = (sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5)/(sumario_mogfit$summary[3,"2.5%"]*fc_base_2_5+1-fc_base_2_5)
fc_base_97_5 = exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])
fc_mog_97_5 = (sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5)/(sumario_mogfit$summary[3,"97.5%"]*fc_base_97_5+1-fc_base_97_5)
sum(p0mog >= fc_mog_2_5 && p0mog <= fc_mog_97_5)
sumario_mogfit
sumario_mogfit
sumario_mogfit$summary[1,"2.5%"]
sumario_mogfit$summary[1,"97.5%"]
(sumario_mogfit$summary[3,"2.5%"]*exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"]))/(sumario_mogfit$summary[3,"2.5%"]*exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"])+1-exp(sumario_mogfit$summary[2,"2.5%"]/sumario_mogfit$summary[1,"2.5%"]))
(sumario_mogfit$summary[3,"97.5%"]*exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"]))/(sumario_mogfit$summary[3,"97.5%"]*exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"])+1-exp(sumario_mogfit$summary[2,"97.5%"]/sumario_mogfit$summary[1,"97.5%"]))
bias = function(true,est){(est-true)/true*100}
## ---
## 1. Scenario:
## ---
# Alpha = -1.2, Beta = 2, Lambda = 0.8, p = 0.1570
n.replicas = 500
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
n_amostral = c(50, 100, 1000, 10000)
mo_mc_alpha = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_beta = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_lambda = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
a0mog=-1.2;b0mog=2;l0mog=0.8
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
sumario_mogfit
## colunas: 3 valores do effective sample size (n_eff)
mo_mc_eff = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do Rhat
mo_mc_Rhat = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_eff[1,1:4,1]
head(mo_mc_eff)
sumario_mogfit
sumario_mogfit[,"n_eff"]
sumario_mogfit$summary[,"n_eff"]
bias = function(true,est){(est-true)/true*100}
## ---
## 1. Scenario:
## ---
# Alpha = -1.2, Beta = 2, Lambda = 0.8, p = 0.1570
n.replicas = 500
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
n_amostral = c(50, 100, 1000, 10000)
mo_mc_alpha = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_beta = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_lambda = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do effective sample size (n_eff)
mo_mc_eff = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do Rhat
mo_mc_Rhat = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## ajuste dos parametros
a0mog=-1.2;b0mog=2;l0mog=0.8
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
for(j in 1:length(n_amostral)){
for(i in 1:n.replicas){
dados.mog = gen.cure.mog(n=n_amostral[j],a=a0mog,b=b0mog,l=l0mog,p=p0mog)
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2])
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 1000, warmup = 100)
mogfit_post_samples = extract(mogfit)
mean_alpha = mean(mogfit_post_samples$alpha); sd_alpha = sd(mogfit_post_samples$alpha)
mean_beta = mean(mogfit_post_samples$beta); sd_beta = sd(mogfit_post_samples$beta)
mean_lambda = mean(mogfit_post_samples$lambda); sd_lambda = sd(mogfit_post_samples$lambda)
## Intervalos de credibilidade
sumario_mogfit = summary(mogfit)
check_alpha = sum(a0mog >= sumario_mogfit$summary[1,"2.5%"] && a0mog <= sumario_mogfit$summary[1,"97.5%"])
check_beta = sum(b0mog >= sumario_mogfit$summary[2,"2.5%"] && a0mog <= sumario_mogfit$summary[2,"97.5%"])
check_lambda = sum(l0mog >= sumario_mogfit$summary[3,"2.5%"] && a0mog <= sumario_mogfit$summary[3,"97.5%"])
## salvando valores
mo_mc_alpha[i,1,j] = mean_alpha; mo_mc_alpha[i,2,j] = sd_alpha; mo_mc_alpha[i,3,j] = bias(est=mean_alpha,true=a0mog)
mo_mc_beta[i,1,j] = mean_beta; mo_mc_beta[i,2,j] = sd_beta; mo_mc_beta[i,3,j] = bias(est=mean_beta,true=b0mog)
mo_mc_lambda[i,1,j] = mean_lambda; mo_mc_lambda[i,2,j] = sd_lambda; mo_mc_lambda[i,3,j] = bias(est=mean_lambda,true=l0mog)
## salvando intervalso de credibilidade
mo_mc_alpha[i,4,j] = check_alpha; mo_mc_beta[i,4,j] = check_beta; mo_mc_lambda[i,4,j] = check_lambda
## salvando diagnóstico das cadeias
mo_mc_eff[i,1:4,j] = sumario_mogfit$summary[,"n_eff"]
mo_mc_Rhat[i,1:4,j] = sumario_mogfit$summary[,"Rhat"]
}
}
n.replicas = 10
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
n_amostral = c(50, 100, 1000, 10000)
mo_mc_alpha = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_beta = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_lambda = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do effective sample size (n_eff)
mo_mc_eff = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do Rhat
mo_mc_Rhat = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## ajuste dos parametros
a0mog=-1.2;b0mog=2;l0mog=0.8
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
for(j in 1:length(n_amostral)){
for(i in 1:n.replicas){
dados.mog = gen.cure.mog(n=n_amostral[j],a=a0mog,b=b0mog,l=l0mog,p=p0mog)
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2])
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 1000, warmup = 100)
mogfit_post_samples = extract(mogfit)
mean_alpha = mean(mogfit_post_samples$alpha); sd_alpha = sd(mogfit_post_samples$alpha)
mean_beta = mean(mogfit_post_samples$beta); sd_beta = sd(mogfit_post_samples$beta)
mean_lambda = mean(mogfit_post_samples$lambda); sd_lambda = sd(mogfit_post_samples$lambda)
## Intervalos de credibilidade
sumario_mogfit = summary(mogfit)
check_alpha = sum(a0mog >= sumario_mogfit$summary[1,"2.5%"] && a0mog <= sumario_mogfit$summary[1,"97.5%"])
check_beta = sum(b0mog >= sumario_mogfit$summary[2,"2.5%"] && a0mog <= sumario_mogfit$summary[2,"97.5%"])
check_lambda = sum(l0mog >= sumario_mogfit$summary[3,"2.5%"] && a0mog <= sumario_mogfit$summary[3,"97.5%"])
## salvando valores
mo_mc_alpha[i,1,j] = mean_alpha; mo_mc_alpha[i,2,j] = sd_alpha; mo_mc_alpha[i,3,j] = bias(est=mean_alpha,true=a0mog)
mo_mc_beta[i,1,j] = mean_beta; mo_mc_beta[i,2,j] = sd_beta; mo_mc_beta[i,3,j] = bias(est=mean_beta,true=b0mog)
mo_mc_lambda[i,1,j] = mean_lambda; mo_mc_lambda[i,2,j] = sd_lambda; mo_mc_lambda[i,3,j] = bias(est=mean_lambda,true=l0mog)
## salvando intervalso de credibilidade
mo_mc_alpha[i,4,j] = check_alpha; mo_mc_beta[i,4,j] = check_beta; mo_mc_lambda[i,4,j] = check_lambda
## salvando diagnóstico das cadeias
mo_mc_eff[i,1:4,j] = sumario_mogfit$summary[,"n_eff"]
mo_mc_Rhat[i,1:4,j] = sumario_mogfit$summary[,"Rhat"]
}
}
mo_mc_alpha
paste("Realizando iteração: ", i, ", n amostral:",j)
paste("Realizando iteração: ", n_replicas[i], ", n amostral:", n_amostral[j])
n_amostral[j]
n_replicas[i]
paste("Realizando iteração: ", n_replicas[i], ", n amostral:", n_amostral[j])
n_replicas
paste("Realizando iteração: ", i, ", n amostral:", n_amostral[j])
paste("Realização Monte Carlo: ", i, ", n amostral:", n_amostral[j])
n.replicas = 10
## colunas: a média a posteriori, desvio padrão a posteriori, bias, coverage
ncols_mc = 4
ncols_mc_medidas = 4
n_amostral = c(50, 100, 1000, 10000)
mo_mc_alpha = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_beta = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
mo_mc_lambda = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do effective sample size (n_eff)
mo_mc_eff = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## colunas: 3 valores do Rhat
mo_mc_Rhat = array(data=0, dim = c(n.replicas, ncols_mc, length(n_amostral)))
## ajuste dos parametros
a0mog=-1.2;b0mog=2;l0mog=0.8
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
for(j in 1:length(n_amostral)){
for(i in 1:n.replicas){
dados.mog = gen.cure.mog(n=n_amostral[j],a=a0mog,b=b0mog,l=l0mog,p=p0mog)
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2])
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 1000, warmup = 100)
mogfit_post_samples = extract(mogfit)
mean_alpha = mean(mogfit_post_samples$alpha); sd_alpha = sd(mogfit_post_samples$alpha)
mean_beta = mean(mogfit_post_samples$beta); sd_beta = sd(mogfit_post_samples$beta)
mean_lambda = mean(mogfit_post_samples$lambda); sd_lambda = sd(mogfit_post_samples$lambda)
## Intervalos de credibilidade
sumario_mogfit = summary(mogfit)
check_alpha = sum(a0mog >= sumario_mogfit$summary[1,"2.5%"] && a0mog <= sumario_mogfit$summary[1,"97.5%"])
check_beta = sum(b0mog >= sumario_mogfit$summary[2,"2.5%"] && a0mog <= sumario_mogfit$summary[2,"97.5%"])
check_lambda = sum(l0mog >= sumario_mogfit$summary[3,"2.5%"] && a0mog <= sumario_mogfit$summary[3,"97.5%"])
## salvando valores
mo_mc_alpha[i,1,j] = mean_alpha; mo_mc_alpha[i,2,j] = sd_alpha; mo_mc_alpha[i,3,j] = bias(est=mean_alpha,true=a0mog)
mo_mc_beta[i,1,j] = mean_beta; mo_mc_beta[i,2,j] = sd_beta; mo_mc_beta[i,3,j] = bias(est=mean_beta,true=b0mog)
mo_mc_lambda[i,1,j] = mean_lambda; mo_mc_lambda[i,2,j] = sd_lambda; mo_mc_lambda[i,3,j] = bias(est=mean_lambda,true=l0mog)
## salvando intervalso de credibilidade
mo_mc_alpha[i,4,j] = check_alpha; mo_mc_beta[i,4,j] = check_beta; mo_mc_lambda[i,4,j] = check_lambda
## salvando diagnóstico das cadeias
mo_mc_eff[i,1:4,j] = sumario_mogfit$summary[,"n_eff"]
mo_mc_Rhat[i,1:4,j] = sumario_mogfit$summary[,"Rhat"]
print(paste("Realização Monte Carlo: ", i, ", tamanho amostral:", n_amostral[j]))
}
}
mo_mc_alpha
mo_mc_beta
mo_mc_lambda
mo_mc_alpha
mo_mc_eff
mo_mc_Rhat
