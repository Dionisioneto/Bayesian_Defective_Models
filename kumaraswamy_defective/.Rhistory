km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
dados.moig = gen.cure.moig(n=n,a=a0moig,b=b0moig,l=l0moig,p=p0moig)
head(dados.moig)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.moig[,1], dados.moig[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_IG(t=t_grid,alpha=a0moig,beta=b0moig,
lambda=l0moig)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0moig, lwd=2, col='steelblue')
cod_moig_stan = "
data {
int<lower=0> N;                        // tamanho amostral
vector[N] time;                        // tempo de falha observado
array[N] int<lower=0, upper=1> delta;        // indicador do evento
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
alpha~normal(0,10);
beta~gamma(0.001,0.001);
lambda~gamma(0.001,0.001);
// Definição manual da função de verossimilhança
for (i in 1:N) {
real z1 = (-1 + alpha * time[i]) / sqrt(beta * time[i]);
real z2 = (-1 - alpha * time[i]) / sqrt(beta * time[i]);
real phi1 = Phi(z1);
real phi2 = Phi(z2);
real exp_term = exp(2 * alpha / beta);
// Verossimilhança do evento observado e censurado
target += delta[i] * log(lambda*exp((-1/(2*beta*time[i]))*(1-alpha*time[i])^2)) -
delta[i] * log(sqrt(2*pi()*beta*t^3) * (lambda + (1-lambda)*(phi1 + exp(2*alpha/beta)*phi2))^2) +
(1-delta[i])*log(lambda-lambda*(phi1 + exp(2*alpha/beta)*phi2)) -
(1-delta[i])*log(lambda+(1-lambda)*(phi1 + exp(2*alpha/beta)*phi2));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_moig_stan, con = "cod_moig_stan.stan")
data_moig = list(N = dim(dados.moig)[1],
time = dados.moig[,1],
delta = dados.moig[,2],
beta = b0moig,
lambda = l0moig)
## Definindo os chutes como uma lista
init_values = list(alpha = a0moig, beta = b0moig, lambda = l0moig)
## Compilar e rodar o modelo
moigfit = stan(file = 'cod_moig_stan.stan', data = data_moig,
chains = 1, iter = 2000, warmup = 200, init = list(init_values))
cod_moig_stan = "
data {
int<lower=0> N;                        // tamanho amostral
vector[N] time;                        // tempo de falha observado
array[N] int<lower=0, upper=1> delta;        // indicador do evento
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
alpha~normal(0,10);
beta~gamma(0.001,0.001);
lambda~gamma(0.001,0.001);
// Definição manual da função de verossimilhança
for (i in 1:N) {
real z1 = (-1 + alpha * time[i]) / sqrt(beta * time[i]);
real z2 = (-1 - alpha * time[i]) / sqrt(beta * time[i]);
real phi1 = Phi(z1);
real phi2 = Phi(z2);
real exp_term = exp(2 * alpha / beta);
// Verossimilhança do evento observado e censurado
target += delta[i] * log(lambda*exp((-1/(2*beta*time[i]))*(1-alpha*time[i])^2)) -
delta[i] * log(sqrt(2*pi()*beta*time[i]^3) * (lambda + (1-lambda)*(phi1 + exp(2*alpha/beta)*phi2))^2) +
(1-delta[i])*log(lambda-lambda*(phi1 + exp(2*alpha/beta)*phi2)) -
(1-delta[i])*log(lambda+(1-lambda)*(phi1 + exp(2*alpha/beta)*phi2));
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_moig_stan, con = "cod_moig_stan.stan")
data_moig = list(N = dim(dados.moig)[1],
time = dados.moig[,1],
delta = dados.moig[,2],
beta = b0moig,
lambda = l0moig)
## Definindo os chutes como uma lista
init_values = list(alpha = a0moig, beta = b0moig, lambda = l0moig)
## Compilar e rodar o modelo
moigfit = stan(file = 'cod_moig_stan.stan', data = data_moig,
chains = 1, iter = 2000, warmup = 200, init = list(init_values))
moigfit_post_samples = extract(moigfit)
plot(moigfit_post_samples$alpha, type='l')
abline(h=a0moig,col="red", lwd=2)
plot(moigfit_post_samples$beta, type='l')
abline(h=b0moig,col="red", lwd=2)
plot(moigfit_post_samples$lambda, type='l')
abline(h=l0moig,col="red", lwd=2)
n=800
a0mog=-1.2;b0mog=2;l0mog=2
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
# -------------------------------------------------------------------------------
library(pacman)
p_load(survival,rstan, R2jags)
# ---
# 3.1 Geração de Dados  ====
St_Gompertz = function(t,alpha,beta){
st = exp(-(beta/alpha)*(exp(alpha*t)-1))
return(st)
}
Ft_Gompertz = function(t,alpha,beta){
Ft = 1 - exp(-(beta/alpha)*(exp(alpha*t)-1))
return(Ft)
}
ft_Gompertz = function(t,alpha,beta){
ft = beta*exp(alpha*beta)*exp(-(beta/alpha)*(exp(alpha*t)-1))
return(ft)
}
# 3.1: Geração de dados
ftmo_gompertz = function(t,alpha,beta,lambda){
num = lambda*ft_Gompertz(t=t,alpha=alpha,beta=beta)
dem = (1-(1-lambda)*St_Gompertz(t=t,alpha=alpha,beta=beta))^2
return(num/dem)
}
Ftmo_gompertz = function(t,alpha,beta,lambda){
num = lambda*St_Gompertz(t=t,alpha=alpha,beta=beta)
dem = 1 - ((1-lambda)*St_Gompertz(t=t,alpha=alpha,beta=beta))
return(1-(num/dem))
}
Stmo_gompertz = function(t,alpha,beta,lambda){
num = lambda*St_Gompertz(t=t,alpha=alpha,beta=beta)
dem = 1 - ((1-lambda)*St_Gompertz(t=t,alpha=alpha,beta=beta))
return(num/dem)
}
gen.cure.mog = function(n,a,b,l,p){
finv.mog = function(t,alpha,beta,lambda,unif){Ftmo_gompertz(t=t,alpha=alpha,beta=beta,lambda=lambda) - unif}
ger.mog = function(alpha,beta,lambda,unif){t=uniroot(finv.mog,c(0,1000),tol=0.01,alpha=alpha,beta=beta,lambda=lambda,unif=unif);return(t$root)}
rm = rbinom(n=n,size=1,prob=1-p)
un = runif(n=n,0,max=1-p)
t = rep(NA,n)
for(i in 1:n){
t[i] = ifelse(rm[i]==0, Inf,  ger.mog(alpha=a,beta=b,lambda=l,unif=un[i]))
}
t_finite = ifelse(t==Inf,0,t)
u2 = runif(n=n,0,max(t_finite))
t2 = pmin(t,u2); delta = ifelse(t<u2,1,0)
return(cbind(t2,delta))
}
n=800
a0mog=-1.2;b0mog=2;l0mog=2
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
survival_object = Surv(dados.mog[,1], dados.mog[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_gompertz(t=t_grid,alpha=a0mog,beta=b0mog,
lambda=l0mog)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
n=800
a0mog=-1.2;b0mog=2;l0mog=2
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.mog[,1], dados.mog[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_gompertz(t=t_grid,alpha=a0mog,beta=b0mog,
lambda=l0mog)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0mog, lwd=2, col='steelblue')
n=800
a0mog=-1.2;b0mog=2;l0mog=2
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.mog[,1], dados.mog[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_gompertz(t=t_grid,alpha=a0mog,beta=b0mog,
lambda=l0mog)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0mog, lwd=2, col='steelblue')
n=800
a0mog=-1.2;b0mog=2;l0mog=2
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.mog[,1], dados.mog[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_gompertz(t=t_grid,alpha=a0mog,beta=b0mog,
lambda=l0mog)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0mog, lwd=2, col='steelblue')
n=800
a0mog=-1.2;b0mog=2;l0mog=2
pbmog=exp(b0mog/a0mog); p0mog=(l0mog*pbmog)/(l0mog*pbmog+1-pbmog)
p0mog
dados.mog = gen.cure.mog(n=n,a=a0mog,b=b0mog,l=l0mog,p=p0mog)
## Verificando na curva de Kaplan-Meier
survival_object = Surv(dados.mog[,1], dados.mog[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,100,by=0.01)
st_t_grid = Stmo_gompertz(t=t_grid,alpha=a0mog,beta=b0mog,
lambda=l0mog)
lines(t_grid,st_t_grid, lwd=2, col = "deeppink")
abline(h=p0mog, lwd=2, col='steelblue')
cod_mog_stan = "
data {
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ normal(0,10);
beta ~ gamma(0.001,0.001);
lambda ~ gamma(0.001,0.001);
// Definição da verossimilhança manualmente
for (i in 1:N) {
// Verossimilhança para cada observação i
exp_term = exp((-beta/alpha)*(exp(alpha*time[i]) - 1))
target += delta[i]*log(lambda*beta*exp(alpha*time[i])*exp_term) -
delta[i]*log((1 - (1- lambda)*exp_term)^2) +
(1 - delta[i])*log(lambda*exp_term) -
(1 - delta[i])*log(1 - (1-lambda)*exp_term);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_mog_stan, con = "cod_mog_stan.stan")
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2],
lambda=l0mog)
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 2000, warmup = 200)
cod_mog_stan = "
data {
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ normal(0,10);
beta ~ gamma(0.001,0.001);
lambda ~ gamma(0.001,0.001);
// Definição da verossimilhança manualmente
for (i in 1:N) {
// Verossimilhança para cada observação i
exp_term = exp((-beta/alpha)*(exp(alpha*time[i]) - 1))
target += delta[i]*log(lambda*beta*exp(alpha*time[i])*exp_term) -
delta[i]*log((1 - (1- lambda)*exp_term)^2) +
(1 - delta[i])*log(lambda*exp_term) -
(1 - delta[i])*log(1 - (1-lambda)*exp_term);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_mog_stan, con = "cod_mog_stan.stan")
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2],
lambda=l0mog)
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 2000, warmup = 200)
cod_mog_stan = "
data {
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ normal(0,10);
beta ~ gamma(0.001,0.001);
lambda ~ gamma(0.001,0.001);
// Definição da verossimilhança manualmente
for (i in 1:N) {
// Verossimilhança para cada observação i
exp_term = exp((-beta/alpha)*(exp(alpha*time[i]) - 1));
target += delta[i]*log(lambda*beta*exp(alpha*time[i])*exp_term) -
delta[i]*log((1 - (1- lambda)*exp_term)^2) +
(1 - delta[i])*log(lambda*exp_term) -
(1 - delta[i])*log(1 - (1-lambda)*exp_term);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_mog_stan, con = "cod_mog_stan.stan")
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2],
lambda=l0mog)
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 2000, warmup = 200)
## Transcrever o código escrito para um file stan
writeLines(cod_mog_stan, con = "cod_mog_stan.stan")
cod_mog_stan = "
data {
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ normal(0,10);
beta ~ gamma(0.001,0.001);
lambda ~ gamma(0.001,0.001);
// Definição da verossimilhança manualmente
for (i in 1:N) {
// Verossimilhança para cada observação i
real exp_term = exp((-beta/alpha)*(exp(alpha*time[i]) - 1));
target += delta[i]*log(lambda*beta*exp(alpha*time[i])*exp_term) -
delta[i]*log((1 - (1- lambda)*exp_term)^2) +
(1 - delta[i])*log(lambda*exp_term) -
(1 - delta[i])*log(1 - (1-lambda)*exp_term);
}
}
"
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2],
lambda=l0mog)
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 2000, warmup = 200)
a0mog;b0mog;l0mog
cod_mog_stan = "
data {
int<lower=0> N;
array[N] real time;
array[N] int<lower=0, upper=1> delta;
}
parameters {
real alpha;
real<lower=0> beta;
real<lower=0> lambda;
}
model {
// Prioris
alpha ~ normal(0,10);
beta ~ gamma(0.001,0.001);
lambda ~ gamma(0.001,0.001);
// Definição da verossimilhança manualmente
real exp_term;  // Declare the variable here
for (i in 1:N) {
// Calculate exp_term for each i
exp_term = exp((-beta / alpha) * (exp(alpha * time[i]) - 1));
target += delta[i] * log(lambda * beta * exp(alpha * time[i]) * exp_term) -
delta[i] * log((1 - (1 - lambda) * exp_term)^2) +
(1 - delta[i]) * log(lambda * exp_term) -
(1 - delta[i]) * log(1 - (1 - lambda) * exp_term);
}
}
"
## Transcrever o código escrito para um file stan
writeLines(cod_mog_stan, con = "cod_mog_stan.stan")
data_mog = list(N = dim(dados.mog)[1],
time = dados.mog[,1],
delta = dados.mog[,2],
lambda=l0mog)
## Compilar e rodar o modelo
mogfit = stan(file = 'cod_mog_stan.stan', data = data_mog,
chains = 1, iter = 2000, warmup = 200)
mogfit_post_samples = extract(mogfit)
plot(mogfit_post_samples$alpha, type='l')
abline(h=a0mog,col="red", lwd=2)
plot(mogfit_post_samples$beta, type='l')
abline(h=b0mog,col="red", lwd=2)
plot(mogfit_post_samples$lambda, type='l')
abline(h=l0mog,col="red", lwd=2)
## estimativas pontuais
mean_alphamog = mean(mogfit_post_samples$alpha)
mean_betamog = mean(mogfit_post_samples$beta)
mean_lambdamog= mean(mogfit_post_samples$lambda)
## Verificando a curva de Kaplan-Meier
survival_object = Surv(dados.mog[,1], dados.mog[,2])
km_fit = survfit(survival_object ~ 1)
plot(km_fit, xlab = "Tempo", ylab = "Probabilidade de Sobrevivência",
main = "Curva de Kaplan-Meier", conf.int = F)
t_grid = seq(0,max(dados.mog[,1])+10,length=100)
lines(t_grid,
Stmo_gompertz(t=t_grid,alpha=mean_alphamog,beta=mean_betamog,lambda=mean_lambdamog),lwd=2,col="steelblue")
fc_base = exp(mean_betamog/mean_alphamog)
fc_mog = (mean_lambdamog*fc_base)/(mean_lambdamog*fc_base+1-fc_base);fc_mog
abline(h=fc_mog,lwd=2,col="red")
